import numpy as np
import networkx as nx
import matplotlib.pyplot as plt
import math
import infomap

"""
The functions for community detection and community draw for graphs
"""

def detect_nx_graph_community(g: nx.Graph):
    im = infomap.Infomap()
    nodes = g.nodes
    im.add_nodes(nodes)
    for edge in g.edges:
        res = g[edge[0]][edge[1]]
        weight = res["weight"]
        im.addLink(edge[0], edge[1], 1 / weight)
    im.run("--directed --silent")
    """
    print(f'node num: {len(nodes)}')
    print(f"Found {im.num_top_modules} modules with codelength: {im.codelength}")
    print("Result")
    print("node module")
    """
    node_module_map = {}
    
    for node in im.tree:
        if node.is_leaf:
            node_module_map[node.node_id] = node.module_id
    
    return node_module_map

def assign_community_color(node_module_map):
    val_map = {}
    colors = ["#ee4035", "#f37736", "#7bc043", "#008744", "#0392cf", "#2a4d69", "#ee4035"]
    node_list=list(node_module_map.keys())
    node_list.sort()
    for node_id in node_list:
        module_id=node_module_map[node_id]
        val_map[module_id] = colors[int(module_id) % len(colors)]
    color_map = [val_map.get(node_module_map[node_id]) for node_id in node_list]
    return color_map

def get_nx_graph_by_adjacent_mat(_adjacent_mat,weight_amplifier=100, weight_cutoff=0.1):
    adjacent_mat=np.array(_adjacent_mat)
    adjacent_mat*=weight_amplifier
    G = nx.Graph(adjacent_mat)
    zero_edge = []
    for u, v, d in G.edges(data=True):
        if abs(d["weight"]) < weight_cutoff:
            zero_edge.append((u, v))
    for u, v in zero_edge:
        G.remove_edge(u, v)
    return G

def draw_community_graph(G:nx.Graph,node_module_map):
    pos = nx.spring_layout(G, k=1.5, scale=100)
    nx.draw_networkx_nodes(G, pos, node_color=assign_community_color(node_module_map))
    nx.draw_networkx_labels(G, pos, font_color="white")
    nx.draw_networkx_edges(G, pos, edge_color="gray")
    edge_labels = {(u, v): np.round(d["weight"], 2) for u, v, d in G.edges(data=True)}
    nx.draw_networkx_edge_labels(G, pos,  edge_labels=edge_labels, font_color="black", alpha=1,
                                 bbox=dict(boxstyle='round',
                                           ec=(1.0, 1.0, 1.0),
                                           fc=(1.0, 1.0, 1.0),
                                           alpha=0.0
                                           ))
    plt.savefig("community.png")

def convert_node_module_map_to_array(node_module_map):
    arr_dict={}
    for node in node_module_map.keys():
        mod=node_module_map[node]
        if mod in arr_dict.keys():
            arr_dict[mod].append(node)
        else:
            arr_dict[mod]=[node]

    arr=[]
    for mod,nodes in arr_dict.items():
        arr.append(nodes)
    return arr

def detect_community(adjacent_mat):
    G = get_nx_graph_by_adjacent_mat(adjacent_mat)
    return convert_node_module_map_to_array(detect_nx_graph_community(G))



if __name__ == "__main__":
    mi = [[0.0, 0.0052283565467462455, 0.00011624367570841482, 0.004682147601901627, 2.1264646366384032e-05, 0.0005436571723814124, 5.2945832526948844e-05, 0.0008076665867163962, 5.2945832526948844e-05, 0.00077809420051006, 0.0006644191554134177, 0.0006644191554134177, 0.00077809420051006, 0.0033339856331849327], [0.0052283565467462455, 0.0, 6.191287416091457e-05, 0.010435680998597971, 0.0003925361321763937, 0.0011419136579412514, 0.0005836423843204319, 0.0016939709117803348, 0.0005836423843204319, 0.001648648230458294, 0.0010402374067071812, 0.0010402374067071812, 0.0016473863536415334, 0.0034685512583137804], [0.00011624367570841482, 6.191287416091457e-05, 0.0, 0.00028031418725653345, 0.0015358015033444528, 0.00034433883622119604, 0.00252976581967726, 2.152841155331209e-06, 0.00252976581967726, 1.50453535091577e-06, 0.016668103240894197, 0.016668103240894197, 1.50453535091577e-06, 0.001558210582741533], [0.004682147601901627, 0.010435680998597971, 0.00028031418725653345, 0.0, 0.0009173396191332686, 0.002572787716396987, 0.0006718620000580322, 0.001907747646626351, 0.0006718620000580322, 0.0019189395086108008, 0.001379304940096207, 0.001379304940096207, 0.0019189395086108008, 0.0034049872115044615], [2.1264646366384032e-05, 0.0003925361321763937, 0.0015358015033444528, 0.0009173396191332686, 0.0, 0.0027248255063640273, 0.0010573997350923348, 0.00022134411522206632, 0.0010573997350923348, 0.00020245318883216346, 0.0056909248248471905, 0.0056909248248471905, 0.00020245318883216346, 0.001543853808737946], [0.0005436571723814124, 0.0011419136579412514, 0.00034433883622119604, 0.002572787716396987, 0.0027248255063640273, 0.0, 0.0002838482379467766, 0.0009173983612619785, 0.0002838482379467766, 0.0008746150218824494, 0.0010442244467943756, 0.0010442244467943756, 0.0016463366976946642, 0.0012299281046521914], [5.2945832526948844e-05, 0.0005836423843204319, 0.00252976581967726, 0.0006718620000580322, 0.0010573997350923348, 0.0002838482379467766, 0.0, 0.018155045539770737, 0.0034590863263307126, 0.017811630612867446, 0.004594299830920301, 0.11898168753602445, 0.01994255591888419, 0.0006816213797504744], [0.0008076665867163962, 0.0016939709117803348, 2.152841155331209e-06, 0.001907747646626351, 0.00022134411522206632, 0.0009173983612619785, 0.018155045539770737, 0.0, 0.019539146984797695, 0.07239852189347724, 0.01895533102586483, 0.01694348088934486, 0.0642063020668804, 0.0010876007068347376], [5.2945832526948844e-05, 0.0005836423843204319, 0.00252976581967726, 0.0006718620000580322, 0.0010573997350923348, 0.0002838482379467766, 0.0034590863263307126, 0.019539146984797695, 0.0, 0.01994255591888419, 0.11898168753602445, 0.004594299830920301, 0.017811630612867446, 0.0006816213797504744], [0.00077809420051006, 0.001648648230458294, 1.50453535091577e-06, 0.0019189395086108008, 0.00020245318883216346, 0.0008746150218824494, 0.017811630612867446, 0.07239852189347724, 0.01994255591888419, 0.0, 0.01858704946694134, 0.01727162679300004, 0.06269631722124824, 0.0010755636751890174], [0.0006644191554134177, 0.0010402374067071812, 0.016668103240894197, 0.001379304940096207, 0.0056909248248471905, 0.0010442244467943756, 0.004594299830920301, 0.01895533102586483, 0.11898168753602445, 0.01858704946694134, 0.0, 0.003187519166673952, 0.01727162679300004, 0.00029150959993640146], [0.0006644191554134177, 0.0010402374067071812, 0.016668103240894197, 0.001379304940096207, 0.0056909248248471905, 0.0010442244467943756, 0.11898168753602445, 0.01694348088934486, 0.004594299830920301, 0.01727162679300004, 0.003187519166673952, 0.0, 0.01858704946694134, 0.00029150959993640146], [0.00077809420051006, 0.0016473863536415334, 1.50453535091577e-06, 0.0019189395086108008, 0.00020245318883216346, 0.0016463366976946642, 0.01994255591888419, 0.0642063020668804, 0.017811630612867446, 0.06269631722124824, 0.01727162679300004, 0.01858704946694134, 0.0, 0.0010755636751890174], [0.0033339856331849327, 0.0034685512583137804, 0.001558210582741533, 0.0034049872115044615, 0.001543853808737946, 0.0012299281046521914, 0.0006816213797504744, 0.0010876007068347376, 0.0006816213797504744, 0.0010755636751890174, 0.00029150959993640146, 0.00029150959993640146, 0.0010755636751890174, 0.0]]

    G = get_nx_graph_by_adjacent_mat(mi,weight_cutoff=0.1)
    node_module_map=detect_nx_graph_community(G)

    print(convert_node_module_map_to_array(node_module_map))
    draw_community_graph(G,node_module_map)
    
