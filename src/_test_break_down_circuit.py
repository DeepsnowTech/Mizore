from openfermion.ops import QubitOperator
from HamiltonianGenerator._stationary_qubit_reducer import get_reduced_energy_obj_with_HF_init
from HamiltonianGenerator.FermionTransform import make_transform_spin_separating, get_parity_transform, bravyi_kitaev
from HamiltonianGenerator import make_example_N2
from Blocks import BlockCircuit
from Precalculation.iTensorCore import run_classcal_precalculation
from Utilities.WaveLocalProperties import get_mutual_information_by_2DMs,get_EoF_by_2DMs
from MoreMethods.Network._community_detection import detect_community
from copy import copy
from PoolGenerator import BlockPool,quasi_imaginary_evolution_rotation_pool,all_rotation_pool
from CircuitConstructor import GreedyConstructor
mi = [[0.0, 0.0052283565467462455, 0.00011624367570841482, 0.004682147601901627, 2.1264646366384032e-05, 0.0005436571723814124, 5.2945832526948844e-05, 0.0008076665867163962, 5.2945832526948844e-05, 0.00077809420051006, 0.0006644191554134177, 0.0006644191554134177, 0.00077809420051006, 0.0033339856331849327], [0.0052283565467462455, 0.0, 6.191287416091457e-05, 0.010435680998597971, 0.0003925361321763937, 0.0011419136579412514, 0.0005836423843204319, 0.0016939709117803348, 0.0005836423843204319, 0.001648648230458294, 0.0010402374067071812, 0.0010402374067071812, 0.0016473863536415334, 0.0034685512583137804], [0.00011624367570841482, 6.191287416091457e-05, 0.0, 0.00028031418725653345, 0.0015358015033444528, 0.00034433883622119604, 0.00252976581967726, 2.152841155331209e-06, 0.00252976581967726, 1.50453535091577e-06, 0.016668103240894197, 0.016668103240894197, 1.50453535091577e-06, 0.001558210582741533], [0.004682147601901627, 0.010435680998597971, 0.00028031418725653345, 0.0, 0.0009173396191332686, 0.002572787716396987, 0.0006718620000580322, 0.001907747646626351, 0.0006718620000580322, 0.0019189395086108008, 0.001379304940096207, 0.001379304940096207, 0.0019189395086108008, 0.0034049872115044615], [2.1264646366384032e-05, 0.0003925361321763937, 0.0015358015033444528, 0.0009173396191332686, 0.0, 0.0027248255063640273, 0.0010573997350923348, 0.00022134411522206632, 0.0010573997350923348, 0.00020245318883216346, 0.0056909248248471905, 0.0056909248248471905, 0.00020245318883216346, 0.001543853808737946], [0.0005436571723814124, 0.0011419136579412514, 0.00034433883622119604, 0.002572787716396987, 0.0027248255063640273, 0.0, 0.0002838482379467766, 0.0009173983612619785, 0.0002838482379467766, 0.0008746150218824494, 0.0010442244467943756, 0.0010442244467943756, 0.0016463366976946642, 0.0012299281046521914], [5.2945832526948844e-05, 0.0005836423843204319, 0.00252976581967726, 0.0006718620000580322, 0.0010573997350923348, 0.0002838482379467766, 0.0, 0.018155045539770737, 0.0034590863263307126, 0.017811630612867446, 0.004594299830920301, 0.11898168753602445, 0.01994255591888419, 0.0006816213797504744], [0.0008076665867163962, 0.0016939709117803348, 2.152841155331209e-06, 0.001907747646626351, 0.00022134411522206632, 0.0009173983612619785, 0.018155045539770737, 0.0, 0.019539146984797695, 0.07239852189347724, 0.01895533102586483, 0.01694348088934486, 0.0642063020668804, 0.0010876007068347376], [5.2945832526948844e-05, 0.0005836423843204319, 0.00252976581967726, 0.0006718620000580322, 0.0010573997350923348, 0.0002838482379467766, 0.0034590863263307126, 0.019539146984797695, 0.0, 0.01994255591888419, 0.11898168753602445, 0.004594299830920301, 0.017811630612867446, 0.0006816213797504744], [0.00077809420051006, 0.001648648230458294, 1.50453535091577e-06, 0.0019189395086108008, 0.00020245318883216346, 0.0008746150218824494, 0.017811630612867446, 0.07239852189347724, 0.01994255591888419, 0.0, 0.01858704946694134, 0.01727162679300004, 0.06269631722124824, 0.0010755636751890174], [0.0006644191554134177, 0.0010402374067071812, 0.016668103240894197, 0.001379304940096207, 0.0056909248248471905, 0.0010442244467943756, 0.004594299830920301, 0.01895533102586483, 0.11898168753602445, 0.01858704946694134, 0.0, 0.003187519166673952, 0.01727162679300004, 0.00029150959993640146], [0.0006644191554134177, 0.0010402374067071812, 0.016668103240894197, 0.001379304940096207, 0.0056909248248471905, 0.0010442244467943756, 0.11898168753602445, 0.01694348088934486, 0.004594299830920301, 0.01727162679300004, 0.003187519166673952, 0.0, 0.01858704946694134, 0.00029150959993640146], [0.00077809420051006, 0.0016473863536415334, 1.50453535091577e-06, 0.0019189395086108008, 0.00020245318883216346, 0.0016463366976946642, 0.01994255591888419, 0.0642063020668804, 0.017811630612867446, 0.06269631722124824, 0.01727162679300004, 0.01858704946694134, 0.0, 0.0010755636751890174], [0.0033339856331849327, 0.0034685512583137804, 0.001558210582741533, 0.0034049872115044615, 0.001543853808737946, 0.0012299281046521914, 0.0006816213797504744, 0.0010876007068347376, 0.0006816213797504744, 0.0010755636751890174, 0.00029150959993640146, 0.00029150959993640146, 0.0010755636751890174, 0.0]]
if __name__=="__main__":
    transform = make_transform_spin_separating(get_parity_transform(16),16)
    energy_obj =make_example_N2(is_computed=False)
    energy_obj=get_reduced_energy_obj_with_HF_init(energy_obj,[11,15])
    community=[[13, 12, 11, 10, 5, 9]]
    broken_energy_objs=[]
    inverse_community=[]
    full_nodes=[]
    for mod in community:
        full_nodes.extend(mod)
    for mod in community:
        inverse_mod=copy(full_nodes)
        for node in mod:
            inverse_mod.remove(node)
        inverse_community.append(inverse_mod)
    #print(inverse_community)
    for mod in inverse_community:
        broken_energy_objs.append(get_reduced_energy_obj_with_HF_init(energy_obj,mod))
    
    index=0
    b_energy_obj=broken_energy_objs[index]

    pool=BlockPool(quasi_imaginary_evolution_rotation_pool(b_energy_obj.hamiltonian))
    #pool=BlockPool(all_rotation_pool(b_energy_obj.n_qubit))
    # Generate the circuit constructor
    constructor=GreedyConstructor(b_energy_obj,pool,project_name="broken"+str(index))
    # Run the constructor
    constructor.execute_construction()