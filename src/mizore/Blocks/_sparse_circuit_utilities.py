from . import BlockCircuit
from ..Utilities.CircuitEvaluation import evaluate_ansatz_0000_amplitudes
from ._utilities import concatenate_circuit, get_inverse_circuit


def get_inner_product_task_on_sparse_circuit(first_circuit: BlockCircuit, second_circuit: BlockCircuit):
    circuit = concatenate_circuit(
        first_circuit, get_inverse_circuit(second_circuit))
    return get_0000_amplitude_on_sparse_circuit(circuit)


def get_0000_amplitude_on_sparse_circuit(circuit):
    disjoint_sets = circuit.get_disjoint_active_sets()
    localized_circuits = []
    for qset in disjoint_sets:
        localized_circuits.append(get_localized_circuit(circuit, qset))
    amp_0000 = 1
    for localized_circuit in localized_circuits:
        localized_circuit.avoid_redundant_qubit()
        pcircuit = localized_circuit.get_fixed_parameter_ansatz()
        if pcircuit.n_qubit == 0:
            part_amp = 1
        else:
            part_amp = evaluate_ansatz_0000_amplitudes(pcircuit.n_qubit, pcircuit.ansatz)
        amp_0000 *= part_amp

    return amp_0000


def get_localized_circuit(_circuit: BlockCircuit, qsubset):
    """
    qsubset should be a disjoint set of qubit generated by get_disjoint_active_sets()
    """
    circuit = _circuit.duplicate()
    remove_list = []
    for i in range(len(circuit.block_list)):
        block = circuit.block_list[i]
        if block.IS_LOCALIZE_AVAILABLE:
            # print(qsubset)
            circuit.block_list[i] = block.get_localized_operator(qsubset)
            # print(circuit.block_list[i])
        else:
            for represent in block.active_qubits:
                break
            if represent not in qsubset:
                remove_list.append(i)
    for i in reversed(remove_list):
        circuit.block_list.pop(i)
    return circuit


def get_localized_circuit_list(_circuit: BlockCircuit):
    """
    qsubsets should be a iterable set of qsubset generated by get_disjoint_active_sets()
    """
    for qsubset in _circuit.get_disjoint_active_sets():
        local_circuit = get_localized_circuit(_circuit, qsubset)
        local_circuit.avoid_redundant_qubit()
        yield local_circuit
